renv::status()
renv::init()
renv::status()
renv::restore()
renv::status()
install.packages(c("quarto", "targets"))
library(c(quarto, targets))
library(quarto)
library(targets)
mid <- function(u,v){
return((u+v)/2)
}
xQ <- mid(xA,xC); yQ <- mid(yA,yC)
divide_triangle <- function(xA,yA,xB,yB,xC,yC){
xO <- mid(xA,xB); yO <- mid(yA,yB)
xP <- mid(xB,xC); yP <- mid(yB,yC)
xQ <- mid(xA,xC); yQ <- mid(yA,yC)
triangle_interieur <- c(xO,yO,xP,yP,xQ,yQ)
triangle1 <- c(xA,yA,xO,yO,xQ,yQ)
triangle2 <- c(xO,yO,xB,yB,xP,yP)
triangle3 <- c(xC,yC,xP,yP,xQ,yQ)
liste <-list(triangle_interieur,triangle1,triangle2,triangle3)
return(liste)
}
list_triangle <- function(liste){
h <- list(1:length(liste))
for (i in 1:length(liste)){
xA <- liste[[i]][1]; yA <- liste[[i]][2]; xB <- liste[[i]][3]; yB <- liste[[i]][4]; xC <- liste[[i]][5]; yC <- liste[[i]][6]
h[[i]] <- divide_tiangle(xA,yA,xB,yB,xC,yC)
}
return(h)
}
#' Title
#'
#' @param liste
#'
#' @return
#' @export
#'
#' @examples
#'
divide_list_triangle <- function(liste){
h <- list(1:length(liste))
for (i in 1:length(liste)){
xA <- liste[[i]][1]; yA <- liste[[i]][2]; xB <- liste[[i]][3]; yB <- liste[[i]][4]; xC <- liste[[i]][5]; yC <- liste[[i]][6]
h[[i]] <- divide_tiangle(xA,yA,xB,yB,xC,yC)
}
return(h)
}
remotes::install_github("idasitingassine/my_blog")
install.packages("remotes")
library(remotes)
remotes::install_github("idasitingassine/my_blog")
triangles <- divide_triangle(1,2,1,3,0,1)
turtle_init()   turtle_speed(0)
turtle_init()
turtle_speed(0)
install.packages("turtle")
library(turtle)
remotes::install_github("idasitingassine/heron")
renv::snapshot()
#' Title
#'
#' @param liste
#'
#' @return
#' @export
#'
#' @examples
#'
divide_list_triangle <- function(liste){
h <- list(1:length(liste))
total_air <- 0
for (i in 1:length(liste)){
xA <- liste[[i]][1]; yA <- liste[[i]][2]; xB <- liste[[i]][3]; yB <- liste[[i]][4]; xC <- liste[[i]][5]; yC <- liste[[i]][6]
h[[i]] <- divide_tiangle(xA,yA,xB,yB,xC,yC)
plot_triangle(xA,yA,xB,yB,xC,yC)
somme_air <- total_air +air_total_tiangle(xA,yA,xB,yB,xC,yC)
}
liste <- list(h,somme_air)
return(liste)
}
plot_triangle <- function(xA,yA,xB,yB,xC,yC){
corner.points <- data.frame(x=c(xA, xB, xC),
y=c(yA, yB, yC))
liste <- divide_triangle(xA,yA,xB,yB,xC,yC)
new.points = data.frame(x=c(liste[[1]][1],liste[[1]][3],liste[[1]][5]),
y=c(liste[[1]][2],liste[[1]][4],liste[[1]][6]))
tab1 <- as.data.frame(setNames(replicate(2,numeric(0), simplify = F),c("x","y") ))
for( i in 2:3){
tab1[1,1]=liste[[i]][1]
tab1[1,2]=liste[[i]][2]
tab1[2,1]=liste[[i]][3]
tab1[2,2]=liste[[i]][4]
tab1[3,1]=liste[[i]][5]
tab1[3,2]=liste[[i]][6]
new.points <- rbind(new.points,tab1)
}
#plot sierpinski
plot.new()
legend("left",legend=c("iter.1"))
my_return=list(polygon(corner.points) ,polygon(new.points[1:3,],col = "black"),
polygon(new.points[4:6,],col = "black"),polygon(new.points[7:9,],col = "black"))
#return(polygon(corner.points))
#return(polygon(new.points[1:3,],col = "black"))
#return( polygon(new.points[4:6,],col = "black"))
#return(polygon(new.points[7:9,],col = "black"))
return(my_return)
}
air_total_tiangle <- function(xA,yA,xB,yB,xC,yC){
AB=sqrt((xB-xA)^2+(yB-yA)^2)
BC=sqrt((xC-xB)^2+(yC-yB)^2)
AC=sqrt((xC-xA)^2+(yC-yA)^2)
return(air_triangle(AB,BC,AC))
}
renv::settings$snapshot.type("all")
renv::snapshot()
tar_config_set(store = "posts/post-with-code/_targets",
script = "posts/post-with-code/_targets.R")
targets::tar_config_set(store = "posts/post-with-code/_targets", script = "posts/post-with-code/_targets.R")
tar_script
targets::tar_script
targets::tar_script()
targets::tar_script("script")
targets::tar_make()
library(targets)
targets::tar_make()
tar_make()
library(targets)
targets::tar_make()
tar_read
tar_read()
library(targets)
targets::tar_make()
library(targets)
targets::tar_make()
rstudio_addin_tar_make_bg()
targets::tar_make()
rstudio_addin_tar_make_bg()
tar_make()
library(targets)
targets::tar_make()
library(targets)
targets::tar_make()
library(targets)
targets::tar_make()
library(targets)
tar_visnetwork()
library(targets)
install.packages("visNetwork")
library(visNetwork)
targets::tar_visnetwork()
tar_visnetwork()
targets::tar_visnetwork()
#' mid (milieu)
#'
#' @param u est un point du triangle
#' @param v est un point du triangle
#'
#' @return
#' @export
#'
#' @examples
mid <- function(u,v){
return((u+v)/2)
}
#' @param yA
#' @param xB
#' @param yB
#' @param xC
#' @param yC
#'
#' @return
#' @export
#'
#' @examples
divide_triangle <- function(xA,yA,xB,yB,xC,yC){
xO <- mid(xA,xB); yO <- mid(yA,yB)
xP <- mid(xB,xC); yP <- mid(yB,yC)
xQ <- mid(xA,xC); yQ <- mid(yA,yC)
triangle_interieur <- c(xO,yO,xP,yP,xQ,yQ)
triangle1 <- c(xA,yA,xO,yO,xQ,yQ)
triangle2 <- c(xO,yO,xB,yB,xP,yP)
triangle3 <- c(xC,yC,xP,yP,xQ,yQ)
liste <-list(triangle_interieur,triangle1,triangle2,triangle3)
return(liste)
}
liste <-list(triangle_interieur,triangle1,triangle2,triangle3)
triangle_interieur <- c(xO,yO,xP,yP,xQ,yQ)
divide_triangle <- function(xA,yA,xB,yB,xC,yC){
xO <- mid(xA,xB); yO <- mid(yA,yB)
xP <- mid(xB,xC); yP <- mid(yB,yC)
xQ <- mid(xA,xC); yQ <- mid(yA,yC)
triangle_interieur <- c(xO,yO,xP,yP,xQ,yQ)
triangle1 <- c(xA,yA,xO,yO,xQ,yQ)
triangle2 <- c(xO,yO,xB,yB,xP,yP)
triangle3 <- c(xC,yC,xP,yP,xQ,yQ)
liste <-list(triangle_interieur,triangle1,triangle2,triangle3)
return(liste)
}
divide_list_triangle <- function(liste){
h <- list(1:length(liste))
total_air <- 0
for (i in 1:length(liste)){
xA <- liste[[i]][1]; yA <- liste[[i]][2]; xB <- liste[[i]][3]; yB <- liste[[i]][4]; xC <- liste[[i]][5]; yC <- liste[[i]][6]
h[[i]] <- divide_tiangle(xA,yA,xB,yB,xC,yC)
plot_triangle(xA,yA,xB,yB,xC,yC)
somme_air <- total_air +air_total_tiangle(xA,yA,xB,yB,xC,yC)
}
liste <- list(h,somme_air)
return(liste)
}
plot_triangle <- function(xA,yA,xB,yB,xC,yC){
corner.points <- data.frame(x=c(xA, xB, xC),
y=c(yA, yB, yC))
liste <- divide_triangle(xA,yA,xB,yB,xC,yC)
new.points = data.frame(x=c(liste[[1]][1],liste[[1]][3],liste[[1]][5]),
y=c(liste[[1]][2],liste[[1]][4],liste[[1]][6]))
tab1 <- as.data.frame(setNames(replicate(2,numeric(0), simplify = F),c("x","y") ))
for( i in 2:3){
tab1[1,1]=liste[[i]][1]
tab1[1,2]=liste[[i]][2]
tab1[2,1]=liste[[i]][3]
tab1[2,2]=liste[[i]][4]
tab1[3,1]=liste[[i]][5]
tab1[3,2]=liste[[i]][6]
new.points <- rbind(new.points,tab1)
}
#plot sierpinski
plot.new()
legend("left",legend=c("iter.1"))
my_return=list(polygon(corner.points) ,polygon(new.points[1:3,],col = "black"),
polygon(new.points[4:6,],col = "black"),polygon(new.points[7:9,],col = "black"))
return(my_return)
}
air_total_tiangle <- function(xA,yA,xB,yB,xC,yC){
AB=sqrt((xB-xA)^2+(yB-yA)^2)
BC=sqrt((xC-xB)^2+(yC-yB)^2)
AC=sqrt((xC-xA)^2+(yC-yA)^2)
return(air_triangle(AB,BC,AC))
}
triangle_interieur <- c(xO,yO,xP,yP,xQ,yQ)
divide_triangle <- function(xA,yA,xB,yB,xC,yC){
xO <- mid(xA,xB); yO <- mid(yA,yB)
xP <- mid(xB,xC); yP <- mid(yB,yC)
xQ <- mid(xA,xC); yQ <- mid(yA,yC)
triangle_interieur <- c(xO,yO,xP,yP,xQ,yQ)
triangle1 <- c(xA,yA,xO,yO,xQ,yQ)
triangle2 <- c(xO,yO,xB,yB,xP,yP)
triangle3 <- c(xC,yC,xP,yP,xQ,yQ)
liste <-list(triangle_interieur,triangle1,triangle2,triangle3)
return(liste)
}
tar_visnetwork
tar_visnetwork()
library(targets)
install.packages("visNetwork")
library(visNetwork)
targets::tar_visnetwork()
targets::tar_make()
tar_meta(fields = warnings, complete_only = TRUE)
targets::tar_make()
tar_meta(fields = warnings, complete_only = TRUE)
targets::tar_make()
library(quarto)
library(heron)
targets::tar_make()
targets::tar_visnetwork()
targets::tar_make()
targets::use_targets
targets::use_targets()
targets::tar_make()
tar_config_set(store = "posts/post-with-code/_targets", script = "posts/post-with-code/_targets.R")
targets::tar_config_set(store = "posts/post-with-code/_targets", script = "posts/post-with-code/_targets.R")
targets::tar_make()
targets::tar_visnetwork()
targets::tar_read("catalogue")
targets::tar_load("catalogue")
install.packages("tarchetypes")
library(tarchetypes)
tarchetypes::tar_quarto()
tarchetypes::tar_quarto("render")
targets::tar_make()
quarto preview
""
quarto::quarto_preview()
